#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrbook
\begin_preamble
% increase link area for cross-references and autoname them
\AtBeginDocument{\renewcommand{\ref}[1]{\mbox{\autoref{#1}}}}
\newlength{\abc}
\settowidth{\abc}{\space}
\AtBeginDocument{%
\addto\extrasenglish{
 \renewcommand{\equationautorefname}{\hspace{-\abc}}
 \renewcommand{\sectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
 \renewcommand{\figureautorefname}{Fig.\negthinspace}
 \renewcommand{\tableautorefname}{Tab.\negthinspace}
}
}

% in case somebody want to have the label "Gleichung"
%\renewcommand{\eqref}[1]{Gleichung~(\negthinspace\autoref{#1})}

% put the link to figure floats to the beginning
% of the figure and not to its end
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% make caption labels bold
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enable calculations
\usepackage{calc}

% fancy page header/footer settings
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increase the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoid that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage,fleqn
\use_default_options true
\master thesis.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Capítulo-2"
\pdf_author "Elena Coronel, Diego Ramírez, Koichi Oguro, Ariel Méndez"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\branch NoChildDocument
\selected 0
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Enable page headers and add the chapter to the header line.
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Desarrollo
\end_layout

\begin_layout Section
Implementación
\end_layout

\begin_layout Subsection
coldaemon.c
\end_layout

\begin_layout Standard

\family typewriter
int main(int argc, char * argv[]);
\end_layout

\begin_layout Standard

\family typewriter
argc :
\family default
 número de argumentos en la invocación
\end_layout

\begin_layout Standard

\family typewriter
argv :
\family default
 arreglo que contiene los argumentos
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La función main tiene como función principal invocar al modulo de configuración
 del sistema y gestionar las señales que el sistema recibe, para ello hace
 uso de un modulo de configuración y sus rutinas de manejo de señales.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsection
config_module.c
\end_layout

\begin_layout Standard

\family typewriter
char config_module(char * config_file, thread_arg * argumento);
\end_layout

\begin_layout Standard

\family typewriter
config_file :
\family default
 nombre completo del fichero de configuración
\end_layout

\begin_layout Standard

\family typewriter
argumento :
\family default
 estructura que guarda los parámetros del sistema
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La función 
\family typewriter
config_module
\family default
 carga en argumento los parámetros que lee y parsea desde el fichero de
 configuración.
 retorna 
\family typewriter
0
\family default
 en caso de éxito y cualquier otro valor en caso de error.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La función invoca al 
\family typewriter
cofnig_parser
\family default
 para llenar los campos de la estructura argumento arma apropiadamente los
 paths de los ficheros 
\family typewriter
acl
\family default
 y 
\family typewriter
log
\family default
, y verifica que el 
\family typewriter
acl
\family default
 exista y pueda leerse para luego retornar.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
void dbg_print_thread_arg(thread_arg * argumento);
\end_layout

\begin_layout Standard

\family typewriter
argumento :
\family default
 estructura que guarda los parámentros del sistema
\end_layout

\begin_layout Standard
Esta función solo existe para propósitos de depuración, toma la estructura
 argumento e imprime sus valores en los registros del sistema (
\family typewriter
/var/log/syslog
\family default
 por defecto).
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsection
coredaemon.c
\end_layout

\begin_layout Standard

\family typewriter
void fin_hilo(thread_arg arg)
\end_layout

\begin_layout Standard

\family typewriter
arg:
\family default
 estructura que almacena los parámetros del sistema
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Cierra adecuadamente la conexión de un hilo y elimina al hilo de la lista
 de hilos activos
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
int recvtimeout(int socket, char *buffer, int len, int timeout)
\end_layout

\begin_layout Standard

\family typewriter
socket : 
\family default
descriptor del socket
\end_layout

\begin_layout Standard

\family typewriter
buffer : 
\family default
espacio para almacenar la cadena leída
\end_layout

\begin_layout Standard

\family typewriter
len : 
\family default
Longitud máxima de la cadena leible
\end_layout

\begin_layout Standard

\family typewriter
timeout : 
\family default
Tiempo máximo de espera en inactividad
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Este meodo implementa la función 
\family typewriter
recv
\family default
 con el agregado de soportar desconexión por timeout.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Se hace uso de la función 
\family typewriter
select()
\family default
 que toma el socket y verifica que haya paquetes en él con tiempo límite
 parametrizado, además está función hace uso de 
\family typewriter
limpiar_telnet()
\family default
 que se encarga de sanear la cadena que llega de los clientes telnet.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
void * coredaemon(void * argumento)
\end_layout

\begin_layout Standard

\family typewriter
argumento:
\family default
 parámetros de configuración del sistema.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Esta función es el corazón lógico del demonio, es el hilo que realiza la
 interacción entre el cliente y el módulo de autenticación y la base de
 datos, formatea y muestra los mensajes al usuario y recibe e interpreta
 los mensajes enviados por el cliente.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
void limpiar_telnet(char * cadena);
\end_layout

\begin_layout Standard

\family typewriter
cadena :
\family default
 cadena a verificar si tiene dato satélite (añadido por el telnet)
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Esta función busca el caracter 
\family typewriter
'
\backslash
015'
\family default
 dentro de la cadena y lo elimina de la misma, devolviendo una cadena limpia
 y libre de caracteres satélite.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsection
thread_manager.c
\end_layout

\begin_layout Standard

\family typewriter
void * thread_manager(void * argumento);
\end_layout

\begin_layout Standard

\family typewriter
argumento:
\family default
 estructura que guarda los parámetros del sistema
\end_layout

\begin_layout Standard
Este es el administrador de hilos y gestor de las conexiones entrantes,
 escuha por conexiones nuevas y las asigna a un nuevo hilo si se pueden
 validar.
\end_layout

\begin_layout Subsection
utils.c
\end_layout

\begin_layout Standard

\family typewriter
void writelog(int log_fd, const char * mensaje);
\end_layout

\begin_layout Standard

\family typewriter
log_fd : 
\family default
descriptor de fichero de logs
\end_layout

\begin_layout Standard

\family typewriter
mensaje : 
\family default
mensaje a escribirse en el log
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Esta sencilla función escribe en el log de manera bloqueante lo que cada
 hilo tenga para registrar.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
void thread_add(struct thread_list **lista, int index);
\end_layout

\begin_layout Standard

\family typewriter
lista :
\family default
 referencia a la lista hilos activos
\end_layout

\begin_layout Standard

\family typewriter
index :
\family default
 número lógico de hilo por añadir
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Este método opera sobre la estructura lista, la recorre y ubica un nuevo
 elemento en ella que corresponde a un hilo identificado por index.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
pthread_t * thread_get(struct thread_list *lista, int index);
\end_layout

\begin_layout Standard

\family typewriter
lista : 
\family default
referencia a la lista hilos activos
\end_layout

\begin_layout Standard

\family typewriter
index : 
\family default
número lógico de hilo por añadir
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Función que toma la lista de hilos y un índice, ubica el hilo referente
 a dicho índice y retorna un puntero a dicho hilo.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
void thread_del(struct thread_list **lista, int index);
\end_layout

\begin_layout Standard

\family typewriter
lista : 
\family default
referencia a la lista hilos activos
\end_layout

\begin_layout Standard

\family typewriter
index : 
\family default
número lógico de hilo por añadir
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Función que borra un hilo de la lista, referenciado por index.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
uint32_t hash( char * str)
\end_layout

\begin_layout Standard

\family typewriter
str :
\family default
 cadena de la cuál se obtendrá el hash
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Esta función calcula el hash de una cadena de caractéres.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
char authentication (char * acl_file, char * user, uint32_t pass_buscado)
\end_layout

\begin_layout Standard

\family typewriter
acl_file :
\family default
 fichero de acl
\end_layout

\begin_layout Standard

\family typewriter
user :
\family default
 nombre de usuario
\end_layout

\begin_layout Standard

\family typewriter
pass_buscado :
\family default
 clave de usuario
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Esta función busca en el fichero de ACL los pares user y pass_buscado (previo
 hash) para retornar 0 en caso de éxito o cualquier otro valor en caso de
 error.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Parser
\end_layout

\begin_layout Subsubsection
config_parser
\end_layout

\begin_layout Standard

\family typewriter
int config_parser(char * config_file, int * puerto, int * threads, int *timeout,
 char ** logpath, char ** logfile, char ** aclpath, char ** aclfile)
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
coldaemon.c
\family default
 utiliza 
\family typewriter
config_parser
\family default
 para obtener los datos que se encuentran parametrizados en el archivo de
 configuración 
\family typewriter
cold.properties.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Mediante la utilización de token (
\family typewriter
tokPtr
\family default
) se extraen los datos almacenados y se asignan a los parámetros:
\end_layout

\begin_layout Itemize

\family typewriter
puerto:
\family default
 número de puerto.
\end_layout

\begin_layout Itemize

\family typewriter
threads:
\family default
 cantidad de threads utilizados.
\end_layout

\begin_layout Itemize

\family typewriter
timeout:
\family default
 tiempo de espera.
\end_layout

\begin_layout Itemize

\family typewriter
logpath:
\family default
 ubicación del log.
\end_layout

\begin_layout Itemize

\family typewriter
logfile:
\family default
 nombre del log.
\end_layout

\begin_layout Itemize

\family typewriter
aclopath:
\family default
 ubicación del log de usuarios.
\end_layout

\begin_layout Itemize

\family typewriter
aclfile:
\family default
 nombre del log de usuarios.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsubsection
transa_parser
\end_layout

\begin_layout Standard

\family typewriter
char col_parser (SERVICIO *servicio, char * patron,int log_fd)
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
coredaemon
\family default
 utiliza 
\family typewriter
col_parser
\family default
 para obtener los datos correspondientes a los parámetros de servicios sobre
 los cuales se realizan las transacciones.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Es necesario parsear:
\end_layout

\begin_layout Itemize

\family typewriter
codser:
\family default
 código de servicio.
\end_layout

\begin_layout Itemize

\family typewriter
numtran:
\family default
 número de transacción.
\end_layout

\begin_layout Itemize

\family typewriter
fechahora:
\family default
 fecha y hora de transacción.
\end_layout

\begin_layout Itemize

\family typewriter
tipofact:
\family default
 tipo de factura.
\end_layout

\begin_layout Itemize

\family typewriter
comprobante:
\family default
 número de comprobante.
\end_layout

\begin_layout Itemize

\family typewriter
monto:
\family default
 monto de la factura.
\end_layout

\begin_layout Itemize

\family typewriter
vencimiento:
\family default
 fecha de vencimiento.
\end_layout

\begin_layout Itemize

\family typewriter
verificador:
\family default
 digito verificador.
\end_layout

\begin_layout Itemize

\family typewriter
prefijo:
\family default
 prefijo.
\end_layout

\begin_layout Itemize

\family typewriter
número: 
\family default
número telefónico.
\end_layout

\begin_layout Itemize

\family typewriter
nummed:
\family default
 número de medidor.
\end_layout

\begin_layout Itemize

\family typewriter
abonado:
\family default
 número de abonado.
\end_layout

\begin_layout Itemize

\family typewriter
mensaje: 
\family default
Caracteres de mensaje.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Los campos son rellenados de acuerdo al Servicio a ser cobrados, aquellos
 que no son utilizados son inicializados.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
char rev_parser(SERVICIO *servicio, char * patron)
\end_layout

\begin_layout Standard

\family typewriter
coredaemon
\family default
 utiliza 
\family typewriter
rev_parser
\family default
 de la cual obtiene los datos:
\end_layout

\begin_layout Itemize

\family typewriter
codser:
\family default
 código de servicio.
\end_layout

\begin_layout Itemize

\family typewriter
numtran:
\family default
 número de transacción.
\end_layout

\begin_layout Itemize

\family typewriter
fechahora:
\family default
 fecha y hora de transacción.
\end_layout

\begin_layout Itemize

\family typewriter
mensaje: 
\family default
Caracteres de mensaje.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
los mismos son almacenados en una estructura 
\family typewriter
SERVICIO
\family default
 para la posterior utilización por la Base de Datos.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsection
Base de Datos
\end_layout

\begin_layout Standard

\series bold
Base de datos utilizada:
\series default
 Postgresql
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Estructura de la base de datos
\end_layout

\begin_layout Itemize
3 tablas (pendientes, pagadas, transacciones)
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Enumerate
Tabla pendientes:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
cod_serv tipo compr monto dig_verif prefijo numero medidor abonado id vencimient
o
\end_layout

\end_deeper
\begin_layout Enumerate
Tabla pagadas:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
cod_serv tipo compr monto dig_verif prefijo numero medidor abonado transaccion
 fecha_hora usuario vencimiento
\end_layout

\end_deeper
\begin_layout Enumerate
Tabla transacciones:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
operacion cod_serv fecha_hora usuario mensaje tipo compr monto dig_verif
 prefijo numero medidor abonado transaccion
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\end_deeper
\begin_layout Standard

\series bold
Lógica de operación
\end_layout

\begin_layout Enumerate
Se recibe una operación junto con la estructura serv
\end_layout

\begin_layout Enumerate
Se determina el tipo de operación a realizar (col, rev, lastrx)
\end_layout

\begin_layout Enumerate
Si es col (cobro) se verifica que la factura a cobrar exista, no esté vencida,
 coincidan los montos y el codigo de transaccion sea el mismo, luego se
 agrega la factura a pagadas, se elimina de pendientes y se agrega la transacció
n a la tabla transacciones junto con el nombre del usuario que realizo el
 cobro.
\end_layout

\begin_layout Enumerate
Si es rev (reversa) se verifica que exista la transaccion en pagadas y se
 traslada de vuelta a la tabla pendientes, tambien se agrega una entrada
 a la tabla de transacciones.
\end_layout

\begin_layout Enumerate
Si es lastrx se consulta en la tabla de transacciones por las 3 ultimas
 transacciones del usuario actual y se concatenan en una cadena que luego
 es devuelta al cliente, la operacion lastrx es considerada como una transacción
 de consulta por lo que se agrega una entrada en la tabla de transacciones.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Section
Operativa
\end_layout

\begin_layout Subsection
coldaemon.c
\end_layout

\begin_layout Standard
Esta función empieza validando la cantidad de argumentos pasados al sistema
 que deben ser 2 y no más, el primer argumento es el nombre propiamente
 del demonio, por lo defecto cold y el segundo es el nombre completo del
 fichero de configuración que por defecto es /etc/cold.properties.
 Si esta validación se cumple el segundo argumento es pasado como parámetro
 a la función config_module, junto con una estructura que almacena los parámetro
s del sistema.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Por lo general hilo principal escribe sus logs sobre /var/log/syslog y solo
 registra estados del demonio y errores del mismo.
 Una vez que llega al bucle principal de trabajo.
 Establece las señales que serán atrapadas 
\family typewriter
TERM
\family default
 y 
\family typewriter
HUP
\family default
, si es la primera vez en el buclea o se ha lanzado una señal HUP se crea
 un nuevo descriptor de socket y se lanza un hilo para manejar conexiones
 entrantes y lanzar nuevos hilos.
 En caso de no ser una señal de 
\family typewriter
HUP
\family default
 o la primera entrada al bucle, el bucle solo verifica que no hayan llegado
 las señales
\family typewriter
 TERM
\family default
 o 
\family typewriter
HUP
\family default
, de llegar 
\family typewriter
TERM
\family default
 se cierran los logs y descriptores y se finaliza el demonio exitosamente.
 De llegar 
\family typewriter
HUP
\family default
 se vuelve a llamar al módulo de configuración y se vuelve a crear el descriptor
 del socket para luego cancelar el hilo que gestione conexiones y volver
 a lanzar uno nuevo con los parámetros leídos por le modulo de configuración.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsection
Coredaemon
\end_layout

\begin_layout Standard

\family typewriter
fin_hilo
\family default
: Este es un breve método que cierra la conexión que usa un hilo, bloquea
 exclusivamente la variable global ready que cuental los hilos activos para
 decrementarla, y elimina al hilo en cuestión de la lista de hilos activos.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
coredaemon
\family default
: La función empieza autenticando al cliente haciendo uso del módulo de
 autenticación, tras validar muestra los mensajes respectivos y llega al
 bucle principal donde lea los comandos del usuario los verifica y ejecuta
 las transacciones asociadas, en esta sección se hace uso frecuente del
 módulo de base de datos.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsection
thread_manager.c
\end_layout

\begin_layout Standard

\family typewriter
thread_manager:
\family default
 Esta función se encarga de abrir los logs, mostrar los primeros mensajes
 del sistema en su bitácora, enlaza el socket con su puerto al demonio y
 se pone en modo de escucha por conexiones entrantes.
 Al legar al bucle principal del programa se realiza llamada bloqueante
 accept() en espera de nuevas conexiones y se asignan las mismas a temp_sock_des
criptor, verifica contra una variable compartida que todavía no se haya
 pasado el número máximo de hilos configurado, rechazando conexiones si
 es necesario, y cerrando el socket.
 Si todavía se permiten conexiones, se asignan adecuadamente las estructuras
 de parámetros del sistema y se cran los hilos.
\end_layout

\begin_layout Subsection
Parser
\end_layout

\begin_layout Subsubsection
config_parser
\end_layout

\begin_layout Standard
Para la configuración del demonio utilizamos 
\family typewriter
config_parser
\family default
 el cual extrae los parámetros utilizados, los mismos se encuentran en el
 archivo de configuración utilizado por el mismo.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subsubsection
transa_parser
\end_layout

\begin_layout Standard

\family typewriter
col_parser:
\family default
 realiza el parseo de la cadena de entrada, la cual contiene la transacción
 a ser realizada.
 En este caso se trata de cobro de servicios.
 El col_parser almacena los datos en la estructura a ser utilizada posteriorment
e por la Base de Datos, de manera a concretar la transacción.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
rev_parser:
\family default
 realiza el parseo de la cadena obtenida, la misma contiene la transacción
 a ser revertida.
 Los datos son almacenados en la estructura SERVICIO para la utilización
 por la Base de Datos.
\end_layout

\begin_layout Subsection
Base de Datos
\end_layout

\begin_layout Standard
Para realizar la conexión con la base de datos desde el demonio se utilizo
 la libreria 
\family typewriter
libpq-dev
\family default
 que provee las siguientes funciones para la interacción con la base de
 datos:
\end_layout

\begin_layout Itemize

\family typewriter
PQconnectdb(conninfo)
\end_layout

\begin_deeper
\begin_layout Standard
Devuelve un objeto del tipo 
\family typewriter
PGconn
\family default
 que es utilizado en las demas funciones de 
\family typewriter
libpq-dev
\family default
 para realizar operaciones sobre la base de datos referenciada por el objeto
 
\family typewriter
PGconn
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
PQexecParams
\end_layout

\begin_deeper
\begin_layout Standard
Envia un comando al servidor y aguarda por el resultado, con la habilidad
 de enviar parámetros en forma separada del texto del comando SQL.
\end_layout

\begin_layout Standard
Este comando recibe un objeto del tipo 
\family typewriter
PGconn
\family default
, el comando SQL con los parámetros con la forma 
\family typewriter
$1, $2, $n
\family default
, la cantidad de parámetros y los valores de los parámetros en un vector,
 ademas recibe en casos especiales los tipos de los parametros enviados
 y el formato de resultado.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Los resultados de 
\family typewriter
PQexecParams
\family default
 son verificados por las siguientes funciones:
\end_layout

\begin_layout Itemize

\family typewriter
PQresultStatus
\end_layout

\begin_deeper
\begin_layout Standard
Recibe un objeto tipo 
\family typewriter
PGresult
\family default
 y devuelve su estado de ejecución, este resultado sera 
\family typewriter
PGRES_COMMAND_OK
\family default
 si el comando fue ejecutado con exito.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
PQgetvalue
\end_layout

\begin_deeper
\begin_layout Standard
Recibe el objeto 
\family typewriter
PGresult
\family default
 y obtiene los valores referenciados por sus parametros, estos parametros
 apuntan a un numero de fila y columna especificos.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
PQntuples
\end_layout

\begin_deeper
\begin_layout Standard
Devuelve la cantidad de filas retornada por el comando, recibe un objeto
 
\family typewriter
PGresult
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
PQnfields
\end_layout

\begin_deeper
\begin_layout Standard
Devuelve la cantidad de columnas retornada por el comando, recibe un objeto
 
\family typewriter
PGresult
\family default
.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Al finalizar una transaccion se limpia el objeto 
\family typewriter
PGresult
\family default
 mediante la funcion
\family typewriter
 PQclear
\end_layout

\begin_layout Standard
Para cerrar la conexión con la base de datos se utiliza 
\family typewriter
PQfinish
\family default
 que recibe el objeto 
\family typewriter
PGconn
\family default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Section
Section
\end_layout

\begin_layout Standard
Script de inicio del demonio
\end_layout

\begin_layout Standard
En la variable 
\family typewriter
$1
\family default
 recibe el parametro que se le envia al script 
\end_layout

\begin_layout Itemize

\family typewriter
start
\end_layout

\begin_layout Itemize

\family typewriter
stop
\end_layout

\begin_layout Itemize

\family typewriter
restart
\end_layout

\begin_layout Itemize

\family typewriter
reload
\end_layout

\begin_layout Itemize

\family typewriter
status
\end_layout

\begin_layout Standard
Con 
\family typewriter
case
\family default
 verificamos la orden recibida y se procede a la ejecucion del comando indicado
\end_layout

\begin_layout Itemize

\family typewriter
start
\end_layout

\begin_deeper
\begin_layout Standard
cold /etc/cold.properties
\end_layout

\begin_layout Standard
Ejecuta el comando y lanza el demonio que se guardo en 
\family typewriter
/bin
\family default
 y luego 
\family typewriter
cold.properties
\family default
 se guardo en /etc/
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
stop
\end_layout

\begin_deeper
\begin_layout Standard
En la variable 
\family typewriter
pid
\family default
 se guarda el 
\family typewriter
pid
\family default
 del proceso llamado 
\family typewriter
cold
\family default
, 
\family typewriter
pidof
\family default
 lanza el 
\family typewriter
pid
\family default
 del proceso nombrado 
\family typewriter
cold
\family default
, si el proceso no esta corriendo devuelve vacio
\end_layout

\begin_layout Standard
En el 
\family typewriter
if
\family default
, 
\family typewriter
-z
\family default
 comprueba que lo que se encuentra en la variable 
\family typewriter
$pid
\family default
 esta vacia
\end_layout

\begin_layout Itemize
Si es verdadero, 
\family typewriter
pid="Vacio"
\family default
 entonces no puede parar ya que no esta corriendo el demonio.
\end_layout

\begin_layout Itemize
Si no da vacio detiene el servicio 
\family typewriter
kill -TERM
\family default
 envia la señal de detenerse al demonio, mediante su 
\family typewriter
pid
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
restart
\end_layout

\begin_deeper
\begin_layout Standard
Se obtiene el pid del demonio.
\end_layout

\begin_layout Itemize
Si es vacio no permite reiniciar.
\end_layout

\begin_layout Itemize
Si no es vacio envia la señal 
\family typewriter
kill -TERM
\family default
 al demonio para que se detenga, y luego lo lanza de nuevo.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
reload
\end_layout

\begin_deeper
\begin_layout Standard
Se obtiene el pid del demonio.
\end_layout

\begin_layout Itemize
Si es vacio no permite recargar.
\end_layout

\begin_layout Itemize
Si no esta vacio envia la señal 
\family typewriter
kill -HUP
\family default
 al demonio para que recargue el archivo de configuración.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
status 
\end_layout

\begin_deeper
\begin_layout Standard
Se obtiene el 
\family typewriter
pid
\family default
 del demonio.
\end_layout

\begin_layout Itemize
Si es vacio notifica que el demonio no esta activo.
\end_layout

\begin_layout Itemize
Si no es vacio significa que el demonio esta corriendo y lo notifica con
 su numero de 
\family typewriter
pid
\family default
.
\end_layout

\begin_layout Itemize
Si no recibio ninguno de estos parametros, notifica el modo en que se debe
 ser enviado.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
\SpecialChar \textcompwordmark{}

\end_layout

\begin_layout Standard
\begin_inset Branch NoChildDocument
status collapsed

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "thesisExample"
options "alpha"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "custom"
width "2.5cm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
